# This file was *autogenerated* from the file generateRight2.sage
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_13 = Integer(13); _sage_const_12 = Integer(12); _sage_const_11 = Integer(11); _sage_const_10 = Integer(10); _sage_const_16 = Integer(16); _sage_const_15 = Integer(15); _sage_const_14 = Integer(14)
from sys import argv
from itertools import combinations, product

def create_new(G):

    ret = []
    case = G.subgraph([_sage_const_16 ,_sage_const_10 ,_sage_const_11 ,_sage_const_12 ]).degree(_sage_const_16 )

    if case == _sage_const_0 :
        permutat = Permutations((ellipsis_range(_sage_const_13 ,Ellipsis,_sage_const_15 )))
        for perm in permutat:
            H = G.copy()
            H.relabel({(ellipsis_range(_sage_const_13 ,Ellipsis,_sage_const_15 ))[i]:perm[i] for i in (ellipsis_range(_sage_const_0 ,Ellipsis,_sage_const_2 ))})
            ret += [H]
            H1 = G.copy()
            H1.relabel({_sage_const_11 :_sage_const_12 ,_sage_const_12 :_sage_const_11 })
            ret += [H1]

    if case == _sage_const_1 :
        permutat = Permutations([_sage_const_13 ,_sage_const_14 ])
        for perm in permutat:
            H = G.copy()
            H.relabel({[_sage_const_13 ,_sage_const_14 ][i]:perm[i] for i in [_sage_const_0 ,_sage_const_1 ]})
            ret+=[H]


    if case == _sage_const_2 :
        permutat = Permutations([_sage_const_14 ,_sage_const_15 ])
        for perm in permutat:
            H = G.copy()
            H.relabel({[_sage_const_14 ,_sage_const_15 ][i]:perm[i] for i in [_sage_const_0 ,_sage_const_1 ]})
            H.relabel({[_sage_const_11 ,_sage_const_12 ][i]:(perm[i]-_sage_const_3 ) for i in [_sage_const_0 ,_sage_const_1 ]})
            ret+=[H]

    # print case, len(ret)
    return ret




L = []
L3=[]
for line in open("right.g6"):
    L3+=[Graph(line).graph6_string()]
    for g in create_new(Graph(line)):
        L += [g.graph6_string()]
L2=[]
print len(L)
L=list(set(L))
print len(L)
for g in L:
    if g not in L3:
        L2+=[g]
print 'Got ', len(L2), 'graphs'
o = open('right2.out','w')
for G in L2:
    o.write(G + '\n')
o.close()    
